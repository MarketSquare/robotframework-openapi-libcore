<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="OpenApiLibCore" type="LIBRARY" format="HTML" scope="SUITE" generated="2021-12-28T14:57:21Z" specversion="3" source="openapi_libcore.py" lineno="160">
<version/>
<doc>&lt;p&gt;Main class providing the keywords and core logic to interact with an OpenAPI.&lt;/p&gt;</doc>
<tags>
</tags>
<inits>
<init name="Init" lineno="163">
<arguments repr="source: str, origin: str = , base_path: str = , mappings_path: str | Path = , username: str = , password: str = , security_token: str = , auth: AuthBase | None = None, invalid_property_default_response: int = 422">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="source: str">
<name>source</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="origin: str = ">
<name>origin</name>
<type>str</type>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="base_path: str = ">
<name>base_path</name>
<type>str</type>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="mappings_path: str | Path = ">
<name>mappings_path</name>
<type>str</type>
<type>Path</type>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="username: str = ">
<name>username</name>
<type>str</type>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="password: str = ">
<name>password</name>
<type>str</type>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="security_token: str = ">
<name>security_token</name>
<type>str</type>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="auth: AuthBase | None = None">
<name>auth</name>
<type>AuthBase</type>
<type>None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="invalid_property_default_response: int = 422">
<name>invalid_property_default_response</name>
<type>int</type>
<default>422</default>
</arg>
</arguments>
<doc>&lt;p&gt;Initialize self.  See help(type(self)) for accurate signature.&lt;/p&gt;</doc>
<shortdoc>Initialize self.  See help(type(self)) for accurate signature.</shortdoc>
</init>
</inits>
<keywords>
<kw name="Authorized Request" lineno="858">
<arguments repr="url: str, method: str, params: Dict[str, typing.Any] | None = None, headers: Dict[str, str] | None = None, json_data: Dict[str, typing.Any] | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="url: str">
<name>url</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="method: str">
<name>method</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="params: Dict[str, typing.Any] | None = None">
<name>params</name>
<type>Dict[str, typing.Any]</type>
<type>None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="headers: Dict[str, str] | None = None">
<name>headers</name>
<type>Dict[str, str]</type>
<type>None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="json_data: Dict[str, typing.Any] | None = None">
<name>json_data</name>
<type>Dict[str, typing.Any]</type>
<type>None</type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;p&gt;Perform a request using the security token or authentication set in the library.&lt;/p&gt;
&lt;p&gt;&amp;gt; Note: provided username / password or auth objects take precedence over token based security&lt;/p&gt;</doc>
<shortdoc>Perform a request using the security token or authentication set in the library.</shortdoc>
</kw>
<kw name="Ensure In Use" lineno="764">
<arguments repr="url: str, resource_relation: IdReference">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="url: str">
<name>url</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="resource_relation: IdReference">
<name>resource_relation</name>
<type>IdReference</type>
</arg>
</arguments>
<doc>&lt;p&gt;Ensure that the (right-most) &lt;span class="name"&gt;id&lt;/span&gt; of the resource referenced by the &lt;span class="name"&gt;url&lt;/span&gt; is used by the resource defined by the &lt;span class="name"&gt;resource_relation&lt;/span&gt;.&lt;/p&gt;</doc>
<shortdoc>Ensure that the (right-most) `id` of the resource referenced by the `url` is used by the resource defined by the `resource_relation`.</shortdoc>
</kw>
<kw name="Get Ids From Url" lineno="338">
<arguments repr="url: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="url: str">
<name>url</name>
<type>str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Perform a GET request on the &lt;span class="name"&gt;url&lt;/span&gt; and return the list of resource &lt;span class="name"&gt;ids&lt;/span&gt; from the response.&lt;/p&gt;</doc>
<shortdoc>Perform a GET request on the `url` and return the list of resource `ids` from the response.</shortdoc>
</kw>
<kw name="Get Invalid Json Data" lineno="633">
<arguments repr="url: str, method: str, status_code: int, request_data: RequestData">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="url: str">
<name>url</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="method: str">
<name>method</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="status_code: int">
<name>status_code</name>
<type>int</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="request_data: RequestData">
<name>request_data</name>
<type>RequestData</type>
</arg>
</arguments>
<doc>&lt;p&gt;Return &lt;span class="name"&gt;json_data&lt;/span&gt; based on the &lt;span class="name"&gt;dto&lt;/span&gt; on the &lt;span class="name"&gt;request_data&lt;/span&gt; that will cause the provided &lt;span class="name"&gt;status_code&lt;/span&gt; for the &lt;span class="name"&gt;method&lt;/span&gt; operation on the &lt;span class="name"&gt;url&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&amp;gt; Note: applicable UniquePropertyValueConstraint and IdReference Relations are considered before changes to &lt;span class="name"&gt;json_data&lt;/span&gt; are made.&lt;/p&gt;</doc>
<shortdoc>Return `json_data` based on the `dto` on the `request_data` that will cause the provided `status_code` for the `method` operation on the `url`.</shortdoc>
</kw>
<kw name="Get Invalidated Parameters" lineno="684">
<arguments repr="status_code: int, request_data: RequestData">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="status_code: int">
<name>status_code</name>
<type>int</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="request_data: RequestData">
<name>request_data</name>
<type>RequestData</type>
</arg>
</arguments>
<doc>&lt;p&gt;Returns a version of &lt;span class="name"&gt;params, headers&lt;/span&gt; as present on &lt;span class="name"&gt;request_data&lt;/span&gt; that has been modified to cause the provided &lt;span class="name"&gt;status_code&lt;/span&gt;.&lt;/p&gt;</doc>
<shortdoc>Returns a version of `params, headers` as present on `request_data` that has been modified to cause the provided `status_code`.</shortdoc>
</kw>
<kw name="Get Invalidated Url" lineno="598">
<arguments repr="valid_url: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="valid_url: str">
<name>valid_url</name>
<type>str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Return an url with all the path parameters in the &lt;span class="name"&gt;valid_url&lt;/span&gt; replaced by a random UUID.&lt;/p&gt;
&lt;p&gt;Raises ValueError if the valid_url cannot be invalidated.&lt;/p&gt;</doc>
<shortdoc>Return an url with all the path parameters in the `valid_url` replaced by a random UUID.</shortdoc>
</kw>
<kw name="Get Json Data For Dto Class" lineno="511">
<arguments repr="schema: Dict[str, typing.Any], dto_class: Dto | Type[OpenApiLibCore.dto_base.Dto], operation_id: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="schema: Dict[str, typing.Any]">
<name>schema</name>
<type>Dict[str, typing.Any]</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="dto_class: Dto | Type[OpenApiLibCore.dto_base.Dto]">
<name>dto_class</name>
<type>Dto</type>
<type>Type[OpenApiLibCore.dto_base.Dto]</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="operation_id: str">
<name>operation_id</name>
<type>str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Generate a valid (json-compatible) dict for all the &lt;span class="name"&gt;dto_class&lt;/span&gt; properties.&lt;/p&gt;</doc>
<shortdoc>Generate a valid (json-compatible) dict for all the `dto_class` properties.</shortdoc>
</kw>
<kw name="Get Json Data With Conflict" lineno="806">
<arguments repr="url: str, method: str, dto: Dto, conflict_status_code: int">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="url: str">
<name>url</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="method: str">
<name>method</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="dto: Dto">
<name>dto</name>
<type>Dto</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="conflict_status_code: int">
<name>conflict_status_code</name>
<type>int</type>
</arg>
</arguments>
<doc>&lt;p&gt;Return &lt;span class="name"&gt;json_data&lt;/span&gt; based on the &lt;span class="name"&gt;UniquePropertyValueConstraint&lt;/span&gt; that must be returned by the &lt;span class="name"&gt;get_relations&lt;/span&gt; implementation on the &lt;span class="name"&gt;dto&lt;/span&gt; for the given &lt;span class="name"&gt;conflict_status_code&lt;/span&gt;.&lt;/p&gt;</doc>
<shortdoc>Return `json_data` based on the `UniquePropertyValueConstraint` that must be returned by the `get_relations` implementation on the `dto` for the given `conflict_status_code`.</shortdoc>
</kw>
<kw name="Get Parameterized Endpoint From Url" lineno="621">
<arguments repr="url: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="url: str">
<name>url</name>
<type>str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Return the endpoint as found in the &lt;span class="name"&gt;paths&lt;/span&gt; section based on the given &lt;span class="name"&gt;url&lt;/span&gt;.&lt;/p&gt;</doc>
<shortdoc>Return the endpoint as found in the `paths` section based on the given `url`.</shortdoc>
</kw>
<kw name="Get Request Data" lineno="363">
<arguments repr="endpoint: str, method: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="endpoint: str">
<name>endpoint</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="method: str">
<name>method</name>
<type>str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Return an object with valid request data for body, headers and query params.&lt;/p&gt;</doc>
<shortdoc>Return an object with valid request data for body, headers and query params.</shortdoc>
</kw>
<kw name="Get Valid Id For Endpoint" lineno="263">
<arguments repr="endpoint: str, method: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="endpoint: str">
<name>endpoint</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="method: str">
<name>method</name>
<type>str</type>
</arg>
</arguments>
<doc>&lt;p&gt;Support keyword that returns the &lt;span class="name"&gt;id&lt;/span&gt; for an existing resource at &lt;span class="name"&gt;endpoint&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;To prevent resource conflicts with other test cases, a new resource is created (POST) if possible.&lt;/p&gt;</doc>
<shortdoc>Support keyword that returns the `id` for an existing resource at `endpoint`.</shortdoc>
</kw>
<kw name="Get Valid Url" lineno="225">
<arguments repr="endpoint: str, method: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="endpoint: str">
<name>endpoint</name>
<type>str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="method: str">
<name>method</name>
<type>str</type>
</arg>
</arguments>
<doc>&lt;p&gt;This keyword returns a valid url for the given &lt;span class="name"&gt;endpoint&lt;/span&gt; and &lt;span class="name"&gt;method&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;If the &lt;span class="name"&gt;endpoint&lt;/span&gt; contains path parameters the Get Valid Id For Endpoint keyword will be executed to retrieve valid ids for the path parameters.&lt;/p&gt;
&lt;p&gt;&amp;gt; Note: if valid ids cannot be retrieved within the scope of the API, the &lt;span class="name"&gt;PathPropertiesConstraint&lt;/span&gt; Relation can be used. More information can be found [here](https://marketsquare.github.io/robotframework-openapi-libcore/advanced_use.html).&lt;/p&gt;</doc>
<shortdoc>This keyword returns a valid url for the given `endpoint` and `method`.</shortdoc>
</kw>
</keywords>
<datatypes>
</datatypes>
</keywordspec>
